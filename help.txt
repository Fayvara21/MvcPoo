The document outlines a guide for implementing a simple task management application using PHP with the MVC pattern. Below are some observations, including errors or improvements that can be made:
Observations and Fixes:

    Database Connection String (Database.php):
        The dsn string in Database.php is split due to line breaks (dbname={$conf\nig['db_name']};). Fix this by ensuring the string is continuous:

    $dsn = "mysql:host={$config['db_host']};dbname={$config['db_name']}";

PDO Exception Handling:

    The database constructor lacks exception handling. Add a try-catch block for better error handling:

    try {
        $this->pdo = new PDO($dsn, $config['db_user'], $config['db_pass']);
        $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        die("Database connection failed: " . $e->getMessage());
    }

CRUD Functionality in Task Model:

    The create, markAsCompleted, and delete methods are incomplete. These need to be implemented:

    public static function create($title)
    {
        $db = Database::getInstance()->getPdo();
        $stmt = $db->prepare("INSERT INTO tasks (title) VALUES (:title)");
        $stmt->execute(['title' => $title]);
    }

    public static function markAsCompleted($id)
    {
        $db = Database::getInstance()->getPdo();
        $stmt = $db->prepare("UPDATE tasks SET is_completed = 1 WHERE id = :id");
        $stmt->execute(['id' => $id]);
    }

    public static function delete($id)
    {
        $db = Database::getInstance()->getPdo();
        $stmt = $db->prepare("DELETE FROM tasks WHERE id = :id");
        $stmt->execute(['id' => $id]);
    }

Routing Issue for /complete and /delete:

    The routes /complete and /delete in public/index.php use $_POST['id'], but the corresponding HTML forms send id through the URL. Update the action attributes of these forms:

    <form method="POST" action="/complete">
        <input type="hidden" name="id" value="<?= $task['id'] ?>">
        <button type="submit">Marquer comme terminée</button>
    </form>

    <form method="POST" action="/delete">
        <input type="hidden" name="id" value="<?= $task['id'] ?>">
        <button type="submit">Supprimer</button>
    </form>

Error Handling for Routes:

    Add validation to ensure id exists and is numeric before passing it to the methods in the controller to prevent SQL injection or errors:

    public function markAsCompleted($id)
    {
        if (!is_numeric($id)) {
            http_response_code(400);
            echo "Invalid Task ID";
            return;
        }
        Task::markAsCompleted($id);
        header('Location: /');
        exit;
    }

Security Enhancements:

    Use prepared statements in the Task model (as shown above) to prevent SQL injection.
    Sanitize user inputs in the TaskController's create method:

    $title = htmlspecialchars($_POST['title'], ENT_QUOTES, 'UTF-8');
    Task::create($title);

Improvements to the Router:

    Refactor the Router to support dynamic parameters (e.g., /complete/{id}). This avoids relying solely on $_POST or query strings for route handling.

Styling Recommendations:

    The application would benefit from better styling. Integrate Bootstrap as suggested in the last step for consistent and responsive design. For example, include this in the style.css or the <head> section of your views:

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">

Add Timestamps to Task Display:

    Display created_at in the index.php view to give more information about each task:

    <th>Date de création</th>
    ...
    <td><?= $task['created_at'] ?></td>

TaskController Redirection:

    After creating, completing, or deleting tasks, use header('Location: /'); consistently to redirect users.

Testing and Deployment:

    The guide lacks a section on deploying the app. Add instructions for using tools like Apache or Nginx to deploy this project in a production environment.
